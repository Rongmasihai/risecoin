# Do not modify this file. Instead, create a rise.properties file with only the properties
# you need to change, and set them there. The values in rise.properties override those in
# rise-default.properties.


#### PEER NETWORKING ####

# Announce my IP address/hostname to peers and allow them to share it with other peers.
# If disabled, peer networking servlet will not be started at all.
rise.shareMyAddress=true

# Port for incoming peer to peer networking requests, if enabled.
rise.peerServerPort=12151

# Host interface on which to listen for peer networking requests, default all.
# Use 0.0.0.0 to listen on all IPv4 interfaces or :: to listen on all IPv4 and IPv6 interfaces
rise.peerServerHost=0.0.0.0

# My externally visible IP address or host name, to be announced to peers.
# It can optionally include a port number, which will also be announced to peers,
# and may be different from rise.peerServerPort (useful if you do port forwarding behind a router).
rise.myAddress=

# My platform, to be announced to peers.
rise.myPlatform=PC

# My hallmark, if available.
rise.myHallmark=

# A list of well known peer addresses / host names, separated by '; '.
rise.wellKnownPeers=

# Known bad peers to be blacklisted
rise.knownBlacklistedPeers=

# Peers used for testnet only.
rise.testnetPeers=

# Maintain active connections with at least that many peers.
rise.maxNumberOfConnectedPublicPeers=20

# Peer networking connect timeout for outgoing connections.
rise.connectTimeout=4000

# Peer networking read timeout for outgoing connections.
rise.readTimeout=8000

# Peer networking server idle timeout, milliseconds.
rise.peerServerIdleTimeout=30000

# Use the peer hallmark to only connect with peers above the defined push/pull hallmark thresholds.
# Disabling hallmark protection also disables weighting of peers by hallmark weight, so connecting
# to any of your peers becomes equally likely.
rise.enableHallmarkProtection=false

# Hallmark threshold to use when sending data to peers.
rise.pushThreshold=0

# Hallmark threshold to use when requesting data from peers.
rise.pullThreshold=0

# Blacklist peers for 600000 milliseconds (i.e. 10 minutes by default).
rise.blacklistingPeriod=600000

# Consider a new transaction or block sent after 10 peers have received it.
rise.sendToPeersLimit=10

# Enable the Jetty Denial of Service Filter for the peer networking server.
rise.enablePeerServerDoSFilter=true

# Compress Http responses for the peer networking server.
rise.enablePeerServerGZIPFilter=true

# Use testnet, leave set to false unless you are really testing.
# Never unlock your real accounts on testnet! Use separate accounts for testing only.
# When using testnet, all custom port settings will be ignored,
# and hardcoded ports of 6874 (peer networking), 6875 (UI) and 6876 (API) will be used.
rise.isTestnet=false

# Save known peers in the database
rise.savePeers=true

# Set to false to disable use of the peers database. This will not delete saved peers.
rise.usePeersDb=true

# Set to false to disable getting more peers from the currently connected peers. Only useful
# when debugging and want to limit the peers to those in peersDb or wellKnownPeers.
rise.getMorePeers=true

# Set to true to run offline - do not connect to peers and do not listen for incoming peer
# connections. This is equivalent to setting rise.shareMyAddress=false, rise.wellKnownPeers=,
# rise.testnetPeers= and rise.usePeersDb=false, and if set to true overrides those properties.
rise.isOffline=false

# Enable re-broadcasting of new transactions until they are received back from at least one
# peer, or found in the blockchain. This feature can optionally be disabled, to avoid the
# risk of revealing that this node is the submitter of such re-broadcasted new transactions.
rise.enableTransactionRebroadcasting=true


#### API SERVER ####

# Accept http/json API requests.
rise.enableAPIServer=true

# Hosts from which to allow http/json API requests, if enabled. Set to * to allow all.
rise.allowedBotHosts=127.0.0.1; localhost; [0:0:0:0:0:0:0:1];

# Port for http/json API requests.
rise.apiServerPort=12153

# Host interface on which to listen for http/json API request, default localhost only.
# Set to 0.0.0.0 to allow the API server to accept requests from all network interfaces.
rise.apiServerHost=127.0.0.1

# Idle timeout for http/json API request connections, milliseconds.
rise.apiServerIdleTimeout=30000

# Directory with html and javascript files for the new client UI, and admin tools utilizing
# the http/json API.
rise.apiResourceBase=html/ui

# Java API documentation directory, optional.
rise.javadocResourceBase=html/doc

# Enable Cross Origin Filter for the API server.
rise.apiServerCORS=false

# Enable SSL for the API server (also need to set rise.keyStorePath and rise.keyStorePassword).
rise.apiSSL=false

# Enforce requests that require POST to only be accepted when submitted as POST.
rise.apiServerEnforcePOST=true

# Compress Http responses for the API server.
rise.enableAPIServerGZIPFilter=false


#### OLD NRS USER INTERFACE ####

# Enable the deprecated NRS user interface.
rise.enableUIServer=false

# Hosts from which to allow NRS user interface requests, if enabled. Set to * to allow all.
rise.allowedUserHosts=127.0.0.1; localhost; [0:0:0:0:0:0:0:1];

# Port for NRS user interface server.
rise.uiServerPort=7875

# Host interface for NRS user interface server, default localhost only.
# Set to 0.0.0.0 to allow the UI to be accessed on all network interfaces.
rise.uiServerHost=127.0.0.1

# Idle timeout for NRS user interface server, milliseconds.
rise.uiServerIdleTimeout=30000

# Directory with html and javascript files for the NRS client user interface.
rise.uiResourceBase=html/nrs

# Enable Cross Origin Filter for NRS user interface server.
rise.uiServerCORS=false

# Enable SSL for the NRS user interface (also need to set rise.keyStorePath and rise.keyStorePassword).
rise.uiSSL=false

# Enforce requests that require POST to only be accepted when submitted as POST.
rise.uiServerEnforcePOST=true



#### DEBUGGING ####

# Log file, will be overwritten at every restart.
#rise.log=rise.log
# The log file is now specified in logging.properties.

# Enable debug log output.
#rise.debug=false
# Debug logging is now specified in logging properties.

# Include caller traceback in log messages.
rise.enableLogTraceback=false

# Enable logging of exception stack traces.
rise.enableStackTraces=true

# Enable logging of Jetty messages.
#rise.debugJetty=false
# Jetty logging is now specified in logging properties.

# Used for debugging peer to peer communications.
rise.communicationLoggingMask=0

# Track balances of the following accounts and related events for debugging purposes.
rise.debugTraceAccounts=

# File name for logging tracked account balances.
rise.debugTraceLog=rise-trace.csv

# Separator character for trace log.
rise.debugTraceSeparator=\t

# Quote character for trace log.
rise.debugTraceQuote="

# Log changes to unconfirmed balances.
rise.debugLogUnconfirmed=false



#### DATABASE ####

# Database connection JDBC url, see the H2 documentation for possible customizations.
# Append ;AUTO_SERVER=TRUE to enable automatic mixed mode access.
# If experiencing database lock timeouts, append ;MVCC=TRUE to enable MVCC.
# The rise_db folder is expected to be in the current working directory, will be created if missing.
rise.dbUrl=jdbc:h2:rise_db/rise;DB_CLOSE_ON_EXIT=FALSE

# Database connection JDBC url to use with the test network, if isTestnet=true.
rise.testDbUrl=jdbc:h2:rise_test_db/rise;DB_CLOSE_ON_EXIT=FALSE

# Database connection timeout in seconds.
rise.dbLoginTimeout=70

# Database default lock timeout in seconds.
rise.dbDefaultLockTimeout=60

# Maximum simultaneous database connections.
rise.maxDbConnections=30

# The memory allocated to database cache, in kB.
# If set to 0, the cache size varies from a minimum of 16MB for heap sizes 160MB or less,
# to a maximum of 256MB for heap sizes 640MB or higher.
rise.dbCacheKB=0



#### JETTY ####

# Settings for the Jetty Denial Of Service Filter, used for the peer networking server only.
rise.peerServerDoSFilter.maxRequestsPerSec=30
rise.peerServerDoSFilter.delayMs=1000
rise.peerServerDoSFilter.maxRequestMs=300000

# keystore file and password, required if uiSSL or apiSSL are enabled.
rise.keyStorePath=keystore
rise.keyStorePassword=password



#### Developers only ####

# Force re-validation of blocks and transaction at start.
rise.forceValidate=false

# Force re-build of derived objects tables at start.
rise.forceScan=false

# Print a list of peers having this version on exit.
rise.dumpPeersVersion=

# Enable trimming of derived objects tables.
rise.trimDerivedTables=true

# If trimming enabled, maintain enough previous height records to allow rollback of at least
# that many blocks. Must be at least 1440 to allow normal fork resolution. After increasing
# this value, a full re-scan needs to be done in order for previously trimmed records to be
# re-created and preserved.
rise.maxRollback=1440

# Enable API requests used for blockchain and database manipulation.
rise.enableDebugAPI=false

